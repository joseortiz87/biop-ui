/**
 * BigOp REST API
 * Bienvenido a la documentacion de _BigOp API_._BigOp API_ te permite crear reportes ciudadanos que se canalizaran a las dependencias responsables en un proceso automatico.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: joseortiz81@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DefaultResponse } from '../model/defaultResponse';
import { Direccion } from '../model/direccion';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DireccionesService {

    protected basePath = 'https://api.bigop.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Crea una nueva direccion.
     * Crea una nueva direccion.
     * @param body Modelo de la nueva direccion a ser creada
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDireccion(body: Direccion, observe?: 'body', reportProgress?: boolean): Observable<DefaultResponse>;
    public addDireccion(body: Direccion, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefaultResponse>>;
    public addDireccion(body: Direccion, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefaultResponse>>;
    public addDireccion(body: Direccion, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addDireccion.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<DefaultResponse>(`${this.basePath}/direcciones`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edita direccion.
     * Editar informacion direccion.
     * @param direccionId ID direccion
     * @param body Modelo del direccion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editDireccion(direccionId: number, body: Direccion, observe?: 'body', reportProgress?: boolean): Observable<DefaultResponse>;
    public editDireccion(direccionId: number, body: Direccion, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefaultResponse>>;
    public editDireccion(direccionId: number, body: Direccion, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefaultResponse>>;
    public editDireccion(direccionId: number, body: Direccion, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (direccionId === null || direccionId === undefined) {
            throw new Error('Required parameter direccionId was null or undefined when calling editDireccion.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling editDireccion.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<DefaultResponse>(`${this.basePath}/direcciones/${encodeURIComponent(String(direccionId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lista direcciones por dependencia
     * Lista direcciones por dependencia.
     * @param dependenciaId ID de la dependencia
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDireccionesByDependencia(dependenciaId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Direccion>>;
    public getAllDireccionesByDependencia(dependenciaId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Direccion>>>;
    public getAllDireccionesByDependencia(dependenciaId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Direccion>>>;
    public getAllDireccionesByDependencia(dependenciaId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (dependenciaId === null || dependenciaId === undefined) {
            throw new Error('Required parameter dependenciaId was null or undefined when calling getAllDireccionesByDependencia.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Direccion>>(`${this.basePath}/direcciones/list/${encodeURIComponent(String(dependenciaId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Informacion de la direccion
     * Informacion de la direccion.
     * @param direccionId ID de la direccion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDireccionById(direccionId: number, observe?: 'body', reportProgress?: boolean): Observable<Direccion>;
    public getDireccionById(direccionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Direccion>>;
    public getDireccionById(direccionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Direccion>>;
    public getDireccionById(direccionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (direccionId === null || direccionId === undefined) {
            throw new Error('Required parameter direccionId was null or undefined when calling getDireccionById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Direccion>(`${this.basePath}/direcciones/${encodeURIComponent(String(direccionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
