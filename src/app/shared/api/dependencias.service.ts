/**
 * BigOp REST API
 * Bienvenido a la documentacion de _BigOp API_._BigOp API_ te permite crear reportes ciudadanos que se canalizaran a las dependencias responsables en un proceso automatico.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: joseortiz81@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DefaultResponse } from '../model/defaultResponse';
import { Dependencia } from '../model/dependencia';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DependenciasService {

    protected basePath = 'https://api.bigop.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Crea una nueva Dependencia.
     * Crea una nueva Dependencia.
     * @param body Modelo de la nueva Dependencia a ser creada
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDependencia(body: Dependencia, observe?: 'body', reportProgress?: boolean): Observable<DefaultResponse>;
    public addDependencia(body: Dependencia, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefaultResponse>>;
    public addDependencia(body: Dependencia, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefaultResponse>>;
    public addDependencia(body: Dependencia, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addDependencia.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<DefaultResponse>(`${this.basePath}/dependencias`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edita dependencia.
     * Editar informacion dependencia.
     * @param dependenciaId ID dependencia
     * @param body Modelo de la dependencia
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editDependencia(dependenciaId: number, body: Dependencia, observe?: 'body', reportProgress?: boolean): Observable<DefaultResponse>;
    public editDependencia(dependenciaId: number, body: Dependencia, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefaultResponse>>;
    public editDependencia(dependenciaId: number, body: Dependencia, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefaultResponse>>;
    public editDependencia(dependenciaId: number, body: Dependencia, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (dependenciaId === null || dependenciaId === undefined) {
            throw new Error('Required parameter dependenciaId was null or undefined when calling editDependencia.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling editDependencia.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<DefaultResponse>(`${this.basePath}/dependencias/${encodeURIComponent(String(dependenciaId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lista dependencias por entidad y municipio
     * Lista dependencias por entidad y municipio.
     * @param entidad ID entidad minusculas
     * @param municipio ID municipio minusculas
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDependenciasByEntidadMunicipio(entidad: string, municipio: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Dependencia>>;
    public getAllDependenciasByEntidadMunicipio(entidad: string, municipio: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Dependencia>>>;
    public getAllDependenciasByEntidadMunicipio(entidad: string, municipio: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Dependencia>>>;
    public getAllDependenciasByEntidadMunicipio(entidad: string, municipio: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (entidad === null || entidad === undefined) {
            throw new Error('Required parameter entidad was null or undefined when calling getAllDependenciasByEntidadMunicipio.');
        }

        if (municipio === null || municipio === undefined) {
            throw new Error('Required parameter municipio was null or undefined when calling getAllDependenciasByEntidadMunicipio.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Dependencia>>(`${this.basePath}/dependencias/${encodeURIComponent(String(entidad))}/${encodeURIComponent(String(municipio))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Informacion de la dependencia
     * Informacion de la dependencia.
     * @param dependenciaId ID de la dependencia
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDependenciaById(dependenciaId: number, observe?: 'body', reportProgress?: boolean): Observable<Dependencia>;
    public getDependenciaById(dependenciaId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dependencia>>;
    public getDependenciaById(dependenciaId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dependencia>>;
    public getDependenciaById(dependenciaId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (dependenciaId === null || dependenciaId === undefined) {
            throw new Error('Required parameter dependenciaId was null or undefined when calling getDependenciaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Dependencia>(`${this.basePath}/dependencias/${encodeURIComponent(String(dependenciaId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
